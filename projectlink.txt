https://github.com/begumbasovali/landmark-tracker-app

# Implementation Report

## Project Overview
The Landmark Tracker App is a web application designed to help users track landmarks, record visits, and plan future trips. The implementation follows a modern web architecture with a Node.js/Express.js backend and a JavaScript frontend.

## Architecture
The project employs a modular architecture:
- **Backend**: Node.js with Express.js to handle HTTP requests and responses
- **Database**: MongoDB Atlas for data storage with Mongoose for object modeling
- **Authentication**: JWT-based authentication system for secure user access
- **Frontend**: Vanilla JavaScript with Leaflet.js for interactive maps and Bootstrap for responsive UI

## Key Components

### Backend Implementation
1. **Server (server.js)**: The core Express server that handles API requests, middleware integration, and serves static files.
2. **Middleware (middleware/auth.js)**: JWT verification middleware for protected routes.
3. **Models**: Mongoose schemas for data structure:
   - User.js: User authentication and profile information
   - Landmark.js: Landmark location and details
   - VisitedLandmark.js: Records of landmark visits with ratings and notes
4. **Routes**: API endpoints for different functionalities:
   - auth.js: User registration, login, and profile management
   - landmarks.js: CRUD operations for landmarks
   - visited.js: Managing visited landmarks and related data

### Frontend Implementation
1. **app.js**: Main application logic for map interaction, landmark management, and UI updates
2. **auth.js**: Client-side authentication handling
3. **index.html**: Main application interface with responsive design
4. **styles.css**: Custom styling with Bootstrap integration

## Implementation Challenges & Solutions
1. **Map Integration**: Implemented Leaflet.js with custom markers and interactive elements for landmark creation and visualization
2. **Authentication**: Created a secure JWT-based system with proper HTTP-only cookies
3. **Data Management**: Designed efficient MongoDB schemas with proper relationships between users, landmarks, and visits
4. **UI/UX Design**: Developed a responsive interface that works across different devices and screen sizes

